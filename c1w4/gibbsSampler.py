from c1w4 import randomizedAlgo
import random
import time
from c1w3 import greedyMotifSearch
import math
from numpy.random import choice


def selectRandomMotifToRemove(motifs):
	random.seed(int(time.time_ns()))
	index = random.randrange(0, len(motifs))
	return index


def getProb(kmer, profile):
	rows = {'A': 0, 'C': 1, 'G': 2, 'T': 3}
	prob = 1
	for idx, letter in enumerate(kmer):
		prob = prob * profile[rows[letter], idx]
	return prob


def getProbabiltyOfAllKmersInDna(dna, profile, k):
	kmerProbDict = {}
	for i in range(0, len(dna) - k + 1):
		currKmer = dna[i: i + k]
		if currKmer in kmerProbDict.keys():
			continue
		prob = getProb(currKmer, profile)
		kmerProbDict[currKmer] = prob
	s = sum(list(kmerProbDict.values()))
	if s is not 0:
		for key in kmerProbDict:
			kmerProbDict[key] = kmerProbDict[key] / s
	return kmerProbDict


def GibbsSampler(dnas, k, t, N):
	theBestMotifs = []
	theBestScore = math.inf
	for i in range(0, 500):
		motifs = [randomizedAlgo.getRandomSubstring(dna, k) for dna in dnas]
		bestMotifs = motifs
		bestScore = greedyMotifSearch.get_score(greedyMotifSearch.build_profile_matrix_with_pseudocounts(bestMotifs))
		for j in range(0, N):
			motifToRemove = selectRandomMotifToRemove(motifs)
			motifs.pop(motifToRemove)
			profile = greedyMotifSearch.build_profile_matrix_with_pseudocounts(motifs)
			pAllKmersInDna = getProbabiltyOfAllKmersInDna(dnas[motifToRemove], profile, k)
			(keys, values) = zip(*pAllKmersInDna.items())
			selection = rollDice(keys, values)
			motifs.insert(motifToRemove, selection)
			currScore = greedyMotifSearch.get_score(greedyMotifSearch.build_profile_matrix_with_pseudocounts(motifs))
			if currScore < bestScore:
				bestMotifs = motifs
				bestScore = currScore
		if bestScore < theBestScore:
			theBestMotifs = bestMotifs
			theBestScore = bestScore
	return theBestMotifs

def rollDice(list_of_candidates, probability_distribution):
	# return random.choices(population=list_of_candidates,weights=probability_distribution,k=1)
	# return choice(list_of_candidates, 1, p=probability_distribution)
    return list_of_candidates[probability_distribution.index(max(probability_distribution))]


if __name__ == "__main__":
	l = """GTGGCTTTATTACTCGGGACCTGTCACCTGAAAGGCCGCCCACACGAGTATGAAATTAGGCCTACTGCAGGAAAATTGTAACCACAACTGACCATCATACCAAATACCATCGTTGTACACATGTGGCGGACCACGCAGCATACACCGGTTATTGCCTGTCCCTCTAAGATGAGTTGAACAGGCCCCCGGGAAACTTAGCGTTTATGAGGCGTCGACATGCGGTAGGCTCCTGACCTCGGGCTTGAGGTTTGTAATAGTGCACTGCGTGATATGCTTCTGTACATTCAGCGACGGTCGCGTTTTGACAGGTCAAATTAGTGGCTTTATTACTC
GGGACCTGTCACCTGAAAGGCCGCCCACACGAGTATGAAATTAGGCCTACTGCAGGAAAATTGTAACCACAACTGACCATCATACCAAATACCATCGTTGTACACATGTGGCGGACCACGCAGCATACACCGGTTATTGCCTGTCCCTCTAAGATGAGTTGAACAGGCCCCCGGGAAACTTAGCGTTTATGAGGCGTCGACATGCGGTAGGCTCCTGACCTCGGGGGCATACCATCTACTCTTGAGGTTTGTAATAGTGCACTGCGTGATATGCTTCTGTACATTCAGCGACGGTCGCGTTTTGACAGGTCAAATTAGTGGCTTTATTACTC
CTAGGGAACATTCCACAACAACCGTCTTCCATTTATAAGGTCGGCCAAAGTTTAGTAGTCCCTAACACATAGAATATGGAGTACGCACTCCGGCTCTCGGCGGATGCTAATCTTTTACTATTCGAAGGAATCATATAACCATAGGGGTACTCAACTACGAGCGCTGATACCATCACGAGACATTCCAGAGCGACGAGATTGTTCAGATAGCGGAAGGGTACACTGACTGGGCGAGCATGCTACTGCCGACTTCACTTTAATCTTCACTTGGGATGCACTTCCCTTATGTAGGCGCACTTCCCAAGTACTTGGGGGATCGTAGGGTCCTTTGG
CAGTGCGGCGACCGCTCTTAATCATTACCGGTGAACGGAAAGATGCAAAGTCGAGGTGTGAGAAGCTTTTCGGCGACTGATCTACTGGCCATGGCGATAAAACCGGTAAAACTAATGCCTCGCGCTTGAACGCTAGGACAATCCGAAATGGTAGGGACCTCTAAACGTAACACCCAAACCAGTGCTGGAAAACCCGTCCAAAATCACTAAACTGGGTACACAATTAATGATCAAGCACGGGTGGCTAACCTAAGTGTTCTCACATAGCTTCAACACCCTGCTGGTTGTCGCCTCAAGACTCCACTGGCTAGCCATATATGGTTAATAGCTGC
CCTAATGAAAAACCTATGTATGGAGCCCAGCACAACGAACAAAACATTTCAGCCTGTACCACTAGCAGTGTGGTCCGAGCCATCTACACAGAGAGATAGGAGTATATCAGTAATCTTTCCCAAATTCGAAGGTGCAATGCTAGACTTCACTGTCCCTTCATACATATAGCTGCCCATCATCACTCATCGACTTACAGGCGGTGTCGTCTAGTGAACCCGATTGCCCGCAGCATCCGGCACAGCAGGCTTTAATGTGCTGCGACCGCGGCCCCTATGCAGCTGTTTGGCATGATCAGAGTCTAGTCAGTCCCATCCAAAGCCACATCAGTTTT
GGGCTGAGGTAGCGCCTGACGACCGAATCGAGCTCATCACGGACATTTGCTGGTTAGTAGTCGATTTAGGAGGCCCTCGTAATGACTTGCGAAGTTCATTGATCGTTTAATACTGGTCCTGCAGCACTATAGACCGACCCGTCGCTCCACCAGGTCAGACCAATGGTACTAAAGTGTTTTAAAAGCCGGTGCGGGGCGAGCCACTAACTCCTATTGCTTAGCCTACTGATCCTTGAGCAGTCATCAGCCTCTAAACGGGGGGACCACAGAGACGTCCACCGGGACAATTGTCTGGAGTGAAGAGCAAGACTTATGGTGTATCAGCGATGCTT
ACCAGCAGCTAGAGGAGCTACCCAAGTCATAGACATCAAAGAGACATGGCTGGGCCGTGGTGCCGAAAATGAAAATGTATGCTCTTAAAGGGTTATTAGTTTTTTACGCCGGGGCTGAGTGACTACATACAATGATTCCGATGGTACTACTCCATATATCTTATGGCGCAACATCTACTCGAGCAATTCCTACGCTGTCTTACCCGACCCGAACATGGACGCGGGGGCAATTACCGGTCTTGACTGCCAGCTGAGATTGGAGTACTTTAGCGTTGATTTCGAATATCAGTTCGACTATAGACTAACAGAAACCTGCGGAGCCCCTCGGAAGA
CTTTCTGGGGTCTACGCAATAGGACCTTGGGTTTGGGACCACATTCTGCAGTGGCGTAAGAATTAGCTAAAGGTCCTTTACCTCAACGAGGCTCGCAGTCTTGTGCCTAAAGCTTCTAGAGGTGCCTCTCAATAAGTATGTAGGTAGTGAAATAAAGCACACTCTCGCTGGGCGGCATTTCTGACACCCGCTTAGCATTTTTGCGTTTGAGTTAGCACCCATCTGGTAGCAACGGCAACGGGTCCCGTGGCCCTGGCGAGCCATCTCACGAACTAGCTCCACTCTAGGGATGCCAGTCAAAATAAGGAACTCATAGACCGACCAGGCGTTCT
ATCCGCGTTTGAGGGCTCTATAAAGGGTGGGACATCGCATCATCTATGTTTTCGAGGTATGGGAGGATTAGCGGGGTCGGCCCTGGACGCCGACAGTAAACGAGAGACTAAAATGTCCAGCCGAATTAACTGGCTTGGCAGAGGGCGAGCCGGATACTGGCATCAATGTGGCTATTAATGGGTACAGGAGTAAAAGTTGTTATGTTAATTTAGTATTTAGGAATGGTGCTCTTTAGAGTCGGTAGGAACCTTGGCTTGAAAGCGTAGCTATCAACTCGTCCGACAATCGGGCTAATCTTTGCATTTTTCGATATGGTCGTAATTAATGGAGA
TACACGGACTAGCTGGTAATAAAATCTCGGAGCGAGCCATCTATCTCAGCAGCTCCGGAGCTCGGTGGGGACACCGTGCACTCGAGGAGAATGACGGCCAGTTAAGCCATCATCGGCTCCGTCCTGCTTCCCCGTTCGACCATTAAGAGCATCGCACCGTACTTGTAGGAACGCGGTAGCCTCCCTCCTTACGATCCGCCGGGGGCTATCATTTCTTGTTACAACTAAATGGTAGTTCTGGTGCTAAACACGGCAGCCGAGGGGCGCACCATGAGAGATTAAATCTCCTGCTTCGAGCGAGAGGATGGAATGAGCTTACCAGAGGGGGTACG
TGACGGGCAAAGCCGGGTTCAACGAAGAAGAAAAACTCTGATCACCCGGTAAGTAATCTTCTGATACGGGATGGCCCTTATTAATCGACACACAATAGAAGCTGGGGACAGAAAGAATTAGTTTTGACCGACCCGGATTGAAGGATGGGCACCCGTATGCTGGAGGGTAGGTGGACCAGTGCTCGCGAAGTGCAAGTGCTAGGTGTCTATTACGTGGTTTACTTTTGGGAGATCATCGACCTAATAGCAGAGCGAAGCGATCTATTTCCCGACTCTCGCCTATTTGGGCGAGCCATCAGTTGATAAAATTTCAGGGATTACCAGTCTCTCTG
TATGATAAGCAGCTAGGGGCTACGACGATGCACTCATGTGAGTGTCTACCTGGTTCCGCACTGCATGATATCGTAAGAGCCTAATTCGGGGCAAGGACCGCAACCCTCGCTATCAATGATCGTTAACGAGCATGCGCCGCCTTATTACAGTAGATTGTCGGATTGCCATCTACTTTGTAATGGCAAATAGCGTCATATGTGTGTTGTATCGGTAAGGCTTATTACTGGGAGGGTGTATGGGAGTACCGAGTGATATGGGAGTTGTATGATGAAGGACATCGATACTCAATGGCCACAGTTGATTGGGAGTACGAACTTATACTGTCACGCTG
GCGAAACGAAATTACCTTCAGCCAAGGGTGCCGGTGCTTAAACCATTAGCACCCTTATTGGGTCTGTCTAATGGCGAGAATTCTACTCACAACGATTCGTCTAAAAAAAGGCATTATCCATACACAACTATAAGGCTAATCAGGGCTGTAATAATGTACGGGGGGAATTTGGGTGTACCTAATAGCTCCAGAATAAGTAGGCCTTTCTTAGCCGAGTGCCATGAATGCCTTTGAGAAGGAGAGCCTTAGGTGCCAATGACGGGACATTCGTCCGGGGAGTTAGATCCGTACGTACGTTAACCAAAGAGGTCTTGGAGACAGTAACGCGTCCG
TACCATCATTCGTGATTGGGGTTGGTCTGTCGTTAGAGCCATCTACTAGCTGAATATCATACTCGTGGTGACCAAGTAGCCGTGTTCGTTCGCAGCAGACATTTCCATTTGTTGGGACATGCATCTTGTTTATTGTCTACCAGGGTTCAAACATTTCCAGTGTCTAGATACATCCAAGGGTGCTATTGTTTTCACCTATGACCAAAACTATTACCTCTGTTGGTATAACAATTCCAGCGAAGAAACTAAGTAACGTTCGCCCTCCTCAGGCGCTAACGTTCTTCTGTAGCTTCTGCATGGCCGGTCGGCCTATAATATACAGTCCATCAATC
GCACGCGTACCGCTGTGTGAGTTTCAAAACCTCGTGACGGAGCTTTGACGTTAACGCACCGATTAACGTGATCTTGACGAGTCAATTGGGGTAATGACGGCGCAGGAAAAGCTACGAGGCGCTATTGCCAGCTAATCCAGCACGTTCATATTGGCGTCTCATCTACTTGCCTGTGGTTCGAGAACCGAGTTCACACGAAAACGGTAGATATATACGTAATGCGTGGTCGCTTACACCCGGTGGCGTCAGAATGTTTGTTTTCTTATCGTTGTAAAGATCCTGTGCCGTTCATTTATCGGTCTGCGGAATCAGCTGGTGACAACTCCCTCCTC
GCCGCTTTAAGCAGCGCCGTCAAAGCACGGCGACATATCTACTAAGTCCTCGCTTTCACTGCTCACCGAGGGCGAGCTCCCGCAGATTTGACATTTTAAAGACGAGGGGGCACCTGTGTTACGAAGACTGAGATGGGTTTCTTGACCGTGGAACTGTAAAAATCTTGGAAAACAGGTAAGCCAGGAAGTTGAGGAGGCTTGCCTTTTACACTCTATAACGGAGTCATATATCGGTGCGCATATATATCCTTACAATCTTTGTTGTCCAATCGCTCTCCACATATGCAAATTATCAATGCGTCACGTTTGGATTGCGTCCTAAACGGCGCAGC
CATGTCTGGTGGTAGCAAGCGCCACGGGCAATTGTCCACGAAGGAGCGATTTGTTTTGCGCGTATCCACCCGAAGCGGCGCAGATCCGCTGTTAAGGAGTCAGGCTCACACGGTAGTATGTCCTTATGTTAGTGCTTATTGAAATAGGCTAACGTTCGGCAGTGCAGTATAGTTTGAGGCGGGAGATGCCAAAATGGTCGGCACACCATCTACTGGGTCTCCATGTAGAAATCGCCACTTGAATGCCTCAATATGGCATGTCCCCACCGACCCTGCAAGGTAGCATAGGCTTCTGAAAAGTGCTTGAGTACCATATAACAAGCAGTAAATTA
GCACACCAAAAGGTACGCAATACTTTGCAACGCGGCTACATACCTCACCTTCCGTATGACCGGGACGGTATAACTCGCGGGTGAGAATAAGGGAGCATGTACCCATATCGTTGATGACGAGGTCTGTGCCGTCAACCTTCAGAATTTAGCGGGGACGAGCTTGATACCGTCGAAAGCGACACGCGCTTAAGGCCGTCATGATGCCTCTGGTCGCGGGCGAGCAGCTGGACATGTTGCAAGGTAATAGACAGAGATATACATATTCCTGTCTGAATAACATGTCATGCCGATCAGCCATCTACTTATATATACGATTCAAGCCAGGTCCATGA
CGAAGATTACCCGTCGATCTTGTGTGCACTAGCGCATCTGGCGTTGCATCGATCATAGGCGAGCCATAACCTCCGTACTTGAACTCTAACCTATACCTTGTACGTTTGTTCCGGGTATGATACTAAATCAGTGGGTTGCACGTAATGACTGCGTTTTGCACATCGGTAGCTTACCAGGTAATTTTTTTAAAAGTCCGTTGGGCCTCCTTTTCACATAACTAAGACTGCAATTTCTGCGAAGCGCAGTAGCGTTTCATTGCCACACCGCTGCTACTTCTTGTTCGGTTAAACAGTGATAACGCTCTTCGCCCGGTAACCGGAGAGGACTTCGC
CATTGGGCGGTTTGTTTAAGTCGCGGCGAGGGCTCTACTCTACATGCCAAGTTACTCCGCCGAACACAATTGAGGGTTCCATGTGTTACTGCATCAGTTATATAATCTGATACTGGAGTCGATTCTGTAAGACGTTGTGCCAGACGCACTATGCCTTCGGTCAGGTAAGTCCCTGATGCATGCACCACCGCACGAATAGACTTGACTAACCAAGGGGATGCGACGGCGGAGAGTGTACCTCAGAGACTGGTTTCCTAATCACCTAGTTGGTCCACAAAAACGCATGCACTATTGACCGGCACTGCAGTCATGCACACTCGCCTCGTACGGGT"""
	k = 15
	t = 20
	N = 100
	dnas = l.strip().split('\n')
	print(*GibbsSampler(dnas, k, t, N), sep=' ')
